#include "common.bt"

enum <byte> PATTERN_TYPE {
    normal = 0x0,
    sample_pro_pattern = 0x1,
    long_sleeve_dress_shirt = 0x3,
    short_sleeve_tee = 0x4,
    tank_top = 0x5,
    sweater = 0x6,
    hoodie = 0x7,
    coat = 0x8,
    short_sleeve_dress = 0x9,
    sleeveless_dress = 0xA,
    long_sleeve_dress = 0xB,
    balloon_hem_dress = 0xC,
    round_dress = 0xD,
    robe = 0xE,
    brimmed_cap = 0xF,
    knit_cap = 0x10,
    brimmed_hat = 0x11,
    acnl_dress_long_sleeve = 0x13,
    acnl_shirt_nosleeve = 0x17,
    acnl_hat = 0x18,
};

typedef struct {
    int uid; // randomly generated?
    int num1; // 08 for me, 09 for Thulinma
    byte zero1[8];
    char name[40];
    uid_str island(10);
    int unk3;
    uid_str creator(10);
    byte zero2[4];
    byte unk1; // Type/datasize?
    byte unk2;
    byte unk4[6];
    color palette[15];

    if (unk1 == 0x00 || unk1 == 0x02 || unk1 == 0x04 || unk1 == 0x06) {
        ubyte data[512]; // normal pattern
    } else if (unk1 == 0x01 || unk1 == 0x05) {
        ubyte data[2048]; // pro pattern
    } else {
        local int unkPos = FTell() - (15 * 3) - 7 - 1;
        Printf("[0x%X] Unexpected unk1: 0x%X\n", unkPos, unk1);
        Exit(1);
    }

    PATTERN_TYPE type;
    short zero3;
} design_pattern;

typedef struct {
    ushort itemId;
    uint flags;
    ushort useCount;
    byte unk[36];
} furniture;

typedef struct {
    byte unk[76];
} struct_unk1;

typedef struct {
    byte species; // 0x23 == uninitialized villager
    byte variant;
    byte variant;
    byte unk1;

    uid_str island(10);
    byte unk5[4];
    uid_str creator(10); // Player who first found/invited this character?
    byte unk6[65500];
    acnhstring catchphrase(12);
    byte unk7[1472];
    furniture furniture_[32];
    struct_unk1 unk8[64];
    byte unk9[3140];
} villager;

typedef struct {
    ushort id;
    ushort x;
    ushort y;
    ushort rot;
    byte unk[12];
} building;

typedef struct {
    uint morningPrice;
    uint eveningPrice;
} turnip_price;

typedef struct {
    uint buyPrice;
    turnip_price sunday;
    turnip_price monday;
    turnip_price tuesday;
    turnip_price wednesday;
    turnip_price thursday;
    turnip_price friday;
    turnip_price saturday;
} turnip_prices;

struct {
    int majorVer;
    int minorVer;
    ushort unk1;
    ushort unk2;
    ushort unk3;
    ushort saveFileRevision;

    if (majorVer != 0x6D || minorVer != 0x78 || saveFileRevision != 4) {
        Printf("Unkown version! This version might not be supported.\n");
    }

    byte unk4[272];
    villager villagers[10] <optimize=false>;

    FSeek(0x1D7310);
    design_pattern patterns[50] <optimize=false>;
    design_pattern proPatterns[50] <optimize=false>;
    design_pattern town_flag;
    design_pattern able_sisters[8] <optimize=false>;

    FSeek(0x2D0F1C);
    building buildings[46];

    FSeek(0x412060);
    turnip_prices _turnip_prices;
} main_content <open=true>;